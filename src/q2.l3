(define take
  (lambda (lst pos)
    (if (empty? lst) '()
      (if (= pos 0) '()
        (cons (car lst) (take (cdr lst)(- pos 1)))
      )
    )
  )
 )

(define take-map
  (lambda (lst func pos)
    (if (empty? lst) '()
      (if (= pos 0) '()
        (cons (func (car lst)) (take-map (cdr lst) func (- pos 1)))
      )
  )
  )
 )



(define take-filter
  (lambda (lst pred pos)
     (if (empty? lst) '()
      (if (= pos 0) '()
        (if (pred (car lst))
            (cons (car lst) (take-filter  (cdr lst) pred ( - pos 1) ))
            (take-filter  (cdr lst) pred pos )
      )
    )
  )
 )
)



(define sub-size
  (lambda (lst size)
    (if (> size (length lst )) '()
      (if (empty? lst) '(())
      (cons (take lst size) (sub-size (cdr lst) size))    
      )
    )
  )
)
 

(define sub-size-map
  (lambda (lst func size)
      (if (> size (length lst )) '()
      (if (empty? lst) '(())
      (cons (take-map lst func size) (sub-size-map (cdr lst) func size))    
      )
    )
  )
 )

(define root
  (lambda (tree)
    (if (empty? tree) '()
      (car tree)
    )
  )
)

(define left
  (lambda (tree)
    (if (empty? tree) '()
      (car(cdr tree)))
  )
 )

(define right
  (lambda (tree)
    (if (empty? tree) '()
      (car(cdr(cdr tree))))
  )
 )

(define count-node
  (lambda (tree val)
    (if (pair? tree)
      (if (empty? tree) 0
            (if (eq? (root tree) val) 
              (+ (count-node (right tree) val) (+ 1 (count-node (left tree) val)))
              (+ (count-node (left tree) val) (count-node (right tree) val))
            )
          )
    
      (if (eq? tree val) 1 0)
    )
  )
 )



(define mirror-tree
  (lambda (tree)
    (if (pair? tree)
      (if (empty? tree) '()
        (list (root tree) (mirror-tree (right tree)) (mirror-tree(left tree)))
      )
      tree
    )
  )
 )

(define make-ok
  (lambda (val)
    (list 'ok val)
  )
)
 
(define make-error
  (lambda (msg)
    (list 'error msg)
  )
)

(define ok?
  (lambda (res)
    (if (pair? res)
      (if (eq? (car res) 'ok) #t
        #f
      )
      #f
    )
  )
)

(define error?
  (lambda (res)
    (if (pair? res)
        (if (eq? (car res) 'error) #t
        #f
      )
      #f
    )
  )
 )

(define result?
  (lambda (res)
    (if (pair? res)
      (if (eq? (car res) 'ok) #t
        (if (eq? (car res) 'error) #t
          #f
        )
      )
      #f
    )
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)
      (car (cdr res))
      (make-error "Error: not a result")
    )
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (result? res)
        (if (ok? res)
          (f (result->val res))
          res
        )
        (make-error "Error: not a result") 
      )
    )
  )
)                                                                                                                                           